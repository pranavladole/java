// add up even numbers

int n = 10
        int sum=0;
        for (int i=1;i<=n;i++){
                if(i%2==0){
                    sum=sum+i;
                }
        }
        System.out.print(sum);
//

       // reverse a string
        String name="pranav";
        String reversed = "";
        
        for(int i= name.length()-1;i>=0;i--){
            reversed = reversed + name.charAt(i);
        }
        System.out.print(reversed);

//


    public static void largestnumber(int[] num){
      int max = num[0];
      for(int i=0; i<num.length;i++){
          if(num[i] > max){
            max = num[i];  
          }
      }
      System.out.print(max);
    }

//

   sumofdigits(123456);
        //);
    }
    
    public static void sumofdigits(int num){
      int sum=0;
      while(num!=0){
     sum = sum + num%10;
      num = num/10;
      }
      
      System.out.print(sum);
    }
// sum of array
  public static void sumofdigits(int[] num){
   int sum=0;
        for(int i=0;i<num.length;i++){
      while(num[i]!=0){
     sum = sum + num[i]%10;
      num[i] = num[i]/10;
      }
        }
      System.out.print(sum);
    }

//
https://www.geeksforgeeks.org/problems/subarray-with-given-sum-1587115621/1?page=1&sortBy=submissions

minmax.add(i);
                minmax.add(j);



majority

class Solution {
    static int majorityElement(int arr[]) {
          HashMap<Integer, Integer> countMap = new HashMap<>();
         for(int i:arr){
             countMap.put(i,countMap.getOrDefault(i, 0) + 1);
              
             if(countMap.get(i)> arr.length/2){
                 return i;
             }
         }
         return -1;
    }
}

//

public String convert(String s) {
       String name = s;
        String lowercase = name.toLowerCase();
            List<String> stringList = new ArrayList<>();
        String[] words = lowercase.split(" ");
        
         int length = words.length;
        for(int i=0;i<=length-1;i++){
        words[i] =     (Character.toUpperCase(words[i].charAt(0)))
            +words[i].substring(1);
            stringList.add(words[i]);
        }
     
       String result = String.join(" ",stringList);
          return result; 
    


// to findelement occuting more than 1
  public List<Integer> findDuplicates(int[] arr) {
       Map<Integer,Integer> countMap = new HashMap<>();
           List <Integer> ele = new ArrayList<>();
        for(int number: arr){
         countMap.put(number, countMap.getOrDefault(number,0) +1);
        }
     
           for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
               if(entry.getValue()>1){
                    ele.add(entry.getKey());
               }
        }  
        return ele;
    }
